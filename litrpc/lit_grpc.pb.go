// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package litrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LitServiceClient is the client API for LitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LitServiceClient interface {
	StopDaemon(ctx context.Context, in *StopDaemonRequest, opts ...grpc.CallOption) (*StopDaemonResponse, error)
}

type litServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLitServiceClient(cc grpc.ClientConnInterface) LitServiceClient {
	return &litServiceClient{cc}
}

func (c *litServiceClient) StopDaemon(ctx context.Context, in *StopDaemonRequest, opts ...grpc.CallOption) (*StopDaemonResponse, error) {
	out := new(StopDaemonResponse)
	err := c.cc.Invoke(ctx, "/litrpc.LitService/StopDaemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LitServiceServer is the server API for LitService service.
// All implementations must embed UnimplementedLitServiceServer
// for forward compatibility
type LitServiceServer interface {
	StopDaemon(context.Context, *StopDaemonRequest) (*StopDaemonResponse, error)
	mustEmbedUnimplementedLitServiceServer()
}

// UnimplementedLitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLitServiceServer struct {
}

func (UnimplementedLitServiceServer) StopDaemon(context.Context, *StopDaemonRequest) (*StopDaemonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDaemon not implemented")
}
func (UnimplementedLitServiceServer) mustEmbedUnimplementedLitServiceServer() {}

// UnsafeLitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LitServiceServer will
// result in compilation errors.
type UnsafeLitServiceServer interface {
	mustEmbedUnimplementedLitServiceServer()
}

func RegisterLitServiceServer(s grpc.ServiceRegistrar, srv LitServiceServer) {
	s.RegisterService(&LitService_ServiceDesc, srv)
}

func _LitService_StopDaemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDaemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LitServiceServer).StopDaemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/litrpc.LitService/StopDaemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LitServiceServer).StopDaemon(ctx, req.(*StopDaemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LitService_ServiceDesc is the grpc.ServiceDesc for LitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "litrpc.LitService",
	HandlerType: (*LitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopDaemon",
			Handler:    _LitService_StopDaemon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lit.proto",
}
